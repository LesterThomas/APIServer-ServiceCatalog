---
swagger: "2.0"
info:
  description: "This is Swagger UI environment generated for the TMF Service Catalog\
    \ Management specification"
  version: "2.0.0"
  title: "Service Catalog Management"
host: "localhost:8080"
basePath: "/tmf-api/serviceCatalogManagement/v2/"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /serviceCatalog:
    get:
      tags:
      - "serviceCatalog"
      summary: "List or find 'ServiceCatalog' objects"
      operationId: "listServiceCatalog"
      parameters:
      - name: "fields"
        in: "query"
        description: "Comma separated properties to display in response"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "For filtering: Name of the catalog"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "For filtering: Indicates the (class) type of catalog. For service\
          \ catalogs, this will be 'ServiceCatalog'."
        required: false
        type: "string"
      - name: "@schemaLocation"
        in: "query"
        description: "For filtering: This field provides a link to the schema describing\
          \ this REST resource"
        required: false
        type: "string"
      - name: "@baseType"
        in: "query"
        description: "For filtering: Indicates<b> </b>the base (class) type of this\
          \ REST resource"
        required: false
        type: "string"
      - name: "version"
        in: "query"
        description: "For filtering: Catalog version"
        required: false
        type: "string"
      - name: "validForStartDateTime"
        in: "query"
        description: "For filtering: An instant of time, starting at the TimePeriod"
        required: false
        type: "string"
        format: "date-time"
      - name: "validForEndDateTime"
        in: "query"
        description: "For filtering: An instant of time, ending at the TimePeriod."
        required: false
        type: "string"
        format: "date-time"
      - name: "lastUpdate"
        in: "query"
        description: "For filtering: Date and time of the last update"
        required: false
        type: "string"
        format: "date-time"
      - name: "lifecycleStatus"
        in: "query"
        description: "For filtering: Used to indicate the current lifecycle status"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceCatalog"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCatalog"
    post:
      tags:
      - "serviceCatalog"
      summary: "Creates a 'ServiceCatalog'"
      operationId: "createServiceCatalog"
      parameters:
      - in: "body"
        name: "serviceCatalog"
        description: "The Service Catalog to be created"
        required: true
        schema:
          $ref: "#/definitions/ServiceCatalog_Create"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/ServiceCatalog"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCatalog"
  /serviceCatalog/{id}:
    get:
      tags:
      - "serviceCatalog"
      summary: "Retrieves a 'ServiceCatalog' by Id"
      operationId: "retrieveServiceCatalog"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Catalog"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceCatalog"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCatalog"
    delete:
      tags:
      - "serviceCatalog"
      summary: "Deletes a 'ServiceCatalog' by Id"
      operationId: "deleteServiceCatalog"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Catalog"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCatalog"
    patch:
      tags:
      - "serviceCatalog"
      summary: "Updates partially a 'ServiceCatalog' by Id"
      operationId: "patchServiceCatalog"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Catalog"
        required: true
        type: "string"
      - in: "body"
        name: "serviceCatalog"
        description: "The Service Catalog to be updated"
        required: true
        schema:
          $ref: "#/definitions/ServiceCatalog_Update"
      responses:
        201:
          description: "Updated"
          schema:
            $ref: "#/definitions/ServiceCatalog"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCatalog"
  /serviceCategory:
    get:
      tags:
      - "serviceCategory"
      summary: "List or find 'ServiceCategory' objects"
      operationId: "listServiceCategory"
      parameters:
      - name: "fields"
        in: "query"
        description: "Comma separated properties to display in response"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "For filtering: Name of the category"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "For filtering: The (class) type of this category"
        required: false
        type: "string"
      - name: "@schemalLocation"
        in: "query"
        description: "For filtering: This field provides a link to the schema describing\
          \ this REST resource"
        required: false
        type: "string"
      - name: "@baseType"
        in: "query"
        description: "For filtering: Immediate base class type of this category"
        required: false
        type: "string"
      - name: "version"
        in: "query"
        description: "For filtering: Category version"
        required: false
        type: "string"
      - name: "validForStartDateTime"
        in: "query"
        description: "For filtering: An instant of time, starting at the TimePeriod"
        required: false
        type: "string"
        format: "date-time"
      - name: "validForEndDateTime"
        in: "query"
        description: "For filtering: An instant of time, ending at the TimePeriod."
        required: false
        type: "string"
        format: "date-time"
      - name: "lifecycleStatus"
        in: "query"
        description: "For filtering: Used to indicate the current lifecycle status"
        required: false
        type: "string"
      - name: "lastUpdate"
        in: "query"
        description: "For filtering: Date and time of the last update"
        required: false
        type: "string"
        format: "date-time"
      - name: "parentId"
        in: "query"
        description: "For filtering: Unique identifier of the parent category"
        required: false
        type: "string"
      - name: "isRoot"
        in: "query"
        description: "For filtering: If true, this Boolean indicates that the category\
          \ is a root of categories"
        required: false
        type: "boolean"
      - name: "relatedPartyRole"
        in: "query"
        description: "For filtering: Role of the related party."
        required: false
        type: "string"
      - name: "relatedPartyName"
        in: "query"
        description: "For filtering: Name of the related party"
        required: false
        type: "string"
      - name: "serviceCandidateVersion"
        in: "query"
        description: "For filtering: ServiceCandidate version"
        required: false
        type: "string"
      - name: "serviceCandidateName"
        in: "query"
        description: "For filtering: Name given to the ServiceCandidate"
        required: false
        type: "string"
      - name: "serviceCandidateType"
        in: "query"
        description: "For filtering: The (class) type of the ServiceCandidate"
        required: false
        type: "string"
      - name: "categoryVersion"
        in: "query"
        description: "For filtering: Category version"
        required: false
        type: "string"
      - name: "categoryName"
        in: "query"
        description: "For filtering: Name of the category"
        required: false
        type: "string"
      - name: "categoryType"
        in: "query"
        description: "For filtering: the class type of the category"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceCategory"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCategory"
    post:
      tags:
      - "serviceCategory"
      summary: "Creates a 'ServiceCategory'"
      operationId: "createServiceCategory"
      parameters:
      - in: "body"
        name: "serviceCategory"
        description: "The Service Category to be created"
        required: true
        schema:
          $ref: "#/definitions/ServiceCategory_Create"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/ServiceCategory"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCategory"
  /serviceCategory/{id}:
    get:
      tags:
      - "serviceCategory"
      summary: "Retrieves a 'ServiceCategory' by Id"
      operationId: "retrieveServiceCategory"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Category"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceCategory"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCategory"
    delete:
      tags:
      - "serviceCategory"
      summary: "Deletes a 'ServiceCategory' by Id"
      operationId: "deleteServiceCategory"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Category"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCategory"
    patch:
      tags:
      - "serviceCategory"
      summary: "Updates partially a 'ServiceCategory' by Id"
      operationId: "patchServiceCategory"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Category"
        required: true
        type: "string"
      - in: "body"
        name: "serviceCategory"
        description: "The Service Category to be updated"
        required: true
        schema:
          $ref: "#/definitions/ServiceCategory_Update"
      responses:
        201:
          description: "Updated"
          schema:
            $ref: "#/definitions/ServiceCategory"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCategory"
  /serviceCandidate:
    get:
      tags:
      - "serviceCandidate"
      summary: "List or find 'ServiceCandidate' objects"
      operationId: "listServiceCandidate"
      parameters:
      - name: "fields"
        in: "query"
        description: "Comma separated properties to display in response"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "For filtering: Name given to this REST resource"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "For filtering: Class type of this REST resource"
        required: false
        type: "string"
      - name: "@schemaLocation"
        in: "query"
        description: "For filtering: This field provides a link to the schema describing\
          \ this REST resource"
        required: false
        type: "string"
      - name: "@baseType"
        in: "query"
        description: "For filtering: The (immediate) base class type of this REST\
          \ resource"
        required: false
        type: "string"
      - name: "version"
        in: "query"
        description: "For filtering: the version of service candidate"
        required: false
        type: "string"
      - name: "validForStartDateTime"
        in: "query"
        description: "For filtering: An instant of time, starting at the TimePeriod"
        required: false
        type: "string"
        format: "date-time"
      - name: "validForEndDateTime"
        in: "query"
        description: "For filtering: An instant of time, ending at the TimePeriod."
        required: false
        type: "string"
        format: "date-time"
      - name: "lastUpdate"
        in: "query"
        description: "For filtering: Date and time of the last update of this REST\
          \ resource"
        required: false
        type: "string"
        format: "date-time"
      - name: "lifecycleStatus"
        in: "query"
        description: "For filtering: Used to indicate the current lifecycle status\
          \ of the service candidate."
        required: false
        type: "string"
      - name: "categoryVersion"
        in: "query"
        description: "For filtering: Category version"
        required: false
        type: "string"
      - name: "categoryName"
        in: "query"
        description: "For filtering: Name of the category"
        required: false
        type: "string"
      - name: "categoryType"
        in: "query"
        description: "For filtering: the class type of the category"
        required: false
        type: "string"
      - name: "serviceSpecificationVersion"
        in: "query"
        description: "For filtering: ServiceSpecification version"
        required: false
        type: "string"
      - name: "serviceSpecificationName"
        in: "query"
        description: "For filtering: Name given to the ServiceSpecification"
        required: false
        type: "string"
      - name: "serviceSpecificationType"
        in: "query"
        description: "For filtering: The (class) type of the ServiceSpecification"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceCandidate"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCandidate"
    post:
      tags:
      - "serviceCandidate"
      summary: "Creates a 'ServiceCandidate'"
      operationId: "createServiceCandidate"
      parameters:
      - in: "body"
        name: "serviceCandidate"
        description: "The Service Candidate to be created"
        required: true
        schema:
          $ref: "#/definitions/ServiceCandidate_Create"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/ServiceCandidate"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCandidate"
  /serviceCandidate/{id}:
    get:
      tags:
      - "serviceCandidate"
      summary: "Retrieves a 'ServiceCandidate' by Id"
      operationId: "retrieveServiceCandidate"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Candidate"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceCandidate"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCandidate"
    delete:
      tags:
      - "serviceCandidate"
      summary: "Deletes a 'ServiceCandidate' by Id"
      operationId: "deleteServiceCandidate"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Candidate"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCandidate"
    patch:
      tags:
      - "serviceCandidate"
      summary: "Updates partially a 'ServiceCandidate' by Id"
      operationId: "patchServiceCandidate"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Candidate"
        required: true
        type: "string"
      - in: "body"
        name: "serviceCandidate"
        description: "The Service Candidate to be updated"
        required: true
        schema:
          $ref: "#/definitions/ServiceCandidate_Update"
      responses:
        201:
          description: "Updated"
          schema:
            $ref: "#/definitions/ServiceCandidate"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceCandidate"
  /serviceSpecification:
    get:
      tags:
      - "serviceSpecification"
      summary: "List or find 'ServiceSpecification' objects"
      operationId: "listServiceSpecification"
      parameters:
      - name: "fields"
        in: "query"
        description: "Comma separated properties to display in response"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "For filtering: Name given to this REST resource"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "For filtering: Class type of this REST resource"
        required: false
        type: "string"
      - name: "@schemaLocation"
        in: "query"
        description: "For filtering: This field provides a link to the schema describing\
          \ this REST resource"
        required: false
        type: "string"
      - name: "@baseType"
        in: "query"
        description: "For filtering: The (immediate) base class type of this REST\
          \ resource"
        required: false
        type: "string"
      - name: "version"
        in: "query"
        description: "For filtering: Service specification version"
        required: false
        type: "string"
      - name: "validForStartDateTime"
        in: "query"
        description: "For filtering: An instant of time, starting at the TimePeriod"
        required: false
        type: "string"
        format: "date-time"
      - name: "validForEndDateTime"
        in: "query"
        description: "For filtering: An instant of time, ending at the TimePeriod."
        required: false
        type: "string"
        format: "date-time"
      - name: "lastUpdate"
        in: "query"
        description: "For filtering: Date and time of the last update of this REST\
          \ resource"
        required: false
        type: "string"
        format: "date-time"
      - name: "lifecycleStatus"
        in: "query"
        description: "For filtering: Used to indicate the current lifecycle status\
          \ of the service specification"
        required: false
        type: "string"
      - name: "isBundle"
        in: "query"
        description: "For filtering: A flag indicates that if this service specification\
          \ is a bundled specification (true) or single (false)."
        required: false
        type: "boolean"
      - name: "resourceSpecificationVersion"
        in: "query"
        description: "For filtering: ResourceSpecification version"
        required: false
        type: "string"
      - name: "resourceSpecificationName"
        in: "query"
        description: "For filtering: Name given to the ResourceSpecification"
        required: false
        type: "string"
      - name: "resourceSpecificationType"
        in: "query"
        description: "For filtering: The (class) type of the ResourceSpecification"
        required: false
        type: "string"
      - name: "attachmentName"
        in: "query"
        description: "For filtering: name given to the attachment"
        required: false
        type: "string"
      - name: "attachmentType"
        in: "query"
        description: "For filtering: Attachment class  type"
        required: false
        type: "string"
      - name: "attachmentUri"
        in: "query"
        description: "For filtering: Uniform Resource Identifier (URI) of the attachment"
        required: false
        type: "string"
      - name: "attachmentMimeType"
        in: "query"
        description: "For filtering: Attachment mime type such as extension file for\
          \ video, picture and document"
        required: false
        type: "string"
      - name: "serviceSpecCharacteristicName"
        in: "query"
        description: "For filtering: A word, term, or phrase by which this characteristic\
          \ specification is known and distinguished from other characteristic specifications."
        required: false
        type: "string"
      - name: "serviceSpecCharacteristicValueType"
        in: "query"
        description: "For filtering: A kind of value that the characteristic can take\
          \ on, such as numeric, text and so forth"
        required: false
        type: "string"
      - name: "serviceSpecCharacteristicConfigurable"
        in: "query"
        description: "For filtering: If true, the Boolean indicates that the ServiceSpecCharacteristic\
          \ is configurable"
        required: false
        type: "boolean"
      - name: "serviceSpecCharacteristicType"
        in: "query"
        description: "For filtering: (Class) type of the ServiceSpecCharacteristic"
        required: false
        type: "string"
      - name: "serviceSpecCharacteristicSchemaLocation"
        in: "query"
        description: "For filtering: A link to the schema describing this characteristic"
        required: false
        type: "string"
      - name: "serviceSpecCharacteristicValueSchemaLocation"
        in: "query"
        description: "For filtering: This (optional) field provides a link to the\
          \ schema describing the value type."
        required: false
        type: "string"
      - name: "serviceSpecCharacteristicMinCardinality"
        in: "query"
        description: "For filtering: The minimum number of instances a CharacteristicValue\
          \ can take on. For example, zero to five phone numbers in a group calling\
          \ plan, where zero is the value for the minCardinality."
        required: false
        type: "integer"
      - name: "serviceSpecCharacteristicMaxCardinality"
        in: "query"
        description: "For filtering: The maximum number of instances a CharacteristicValue\
          \ can take on. For example, zero to five phone numbers in a group calling\
          \ plan, where five is the value for the maxCardinality."
        required: false
        type: "integer"
      - name: "serviceSpecCharacteristicIsUnique"
        in: "query"
        description: "For filtering: An indicator that specifies if a value is unique\
          \ for the specification. Possible values are; \"unique while value is in\
          \ effect\" and \"unique whether value is in effect or not\""
        required: false
        type: "boolean"
      - name: "serviceSpecCharacteristicRegex"
        in: "query"
        description: "For filtering: A rule or principle represented in regular expression\
          \ used to derive the value of a characteristic value."
        required: false
        type: "string"
      - name: "serviceSpecCharacteristicExtensible"
        in: "query"
        description: "For filtering: An indicator that specifies that the values for\
          \ the characteristic can be extended by adding new values when instantiating\
          \ a characteristic for an Entity."
        required: false
        type: "boolean"
      - name: "relatedPartyRole"
        in: "query"
        description: "For filtering: Role of the related party."
        required: false
        type: "string"
      - name: "relatedPartyName"
        in: "query"
        description: "For filtering: Name of the related party"
        required: false
        type: "string"
      - name: "serviceSpecRelationshipType"
        in: "query"
        description: "For filtering: Type of relationship such as migration, substitution,\
          \ dependency, exclusivity"
        required: false
        type: "string"
      - name: "serviceSpecRelationshipRole"
        in: "query"
        description: "For filtering: The association role for this service specification"
        required: false
        type: "string"
      - name: "serviceSpecRelationshipName"
        in: "query"
        description: "For filtering: The name given to the target service specification\
          \ instance"
        required: false
        type: "string"
      - name: "targetServiceSchemaType"
        in: "query"
        description: "For filtering: Class type of the target service"
        required: false
        type: "string"
      - name: "targetServiceSchemaSchemaLocation"
        in: "query"
        description: "For filtering: This field provides a link to the schema describing\
          \ the target service"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceSpecification"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceSpecification"
    post:
      tags:
      - "serviceSpecification"
      summary: "Creates a 'ServiceSpecification'"
      operationId: "createServiceSpecification"
      parameters:
      - in: "body"
        name: "serviceSpecification"
        description: "The Service Specification to be created"
        required: true
        schema:
          $ref: "#/definitions/ServiceSpecification_Create"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/ServiceSpecification"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceSpecification"
  /serviceSpecification/{id}:
    get:
      tags:
      - "serviceSpecification"
      summary: "Retrieves a 'ServiceSpecification' by Id"
      operationId: "retrieveServiceSpecification"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Specification"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceSpecification"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceSpecification"
    delete:
      tags:
      - "serviceSpecification"
      summary: "Deletes a 'ServiceSpecification' by Id"
      operationId: "deleteServiceSpecification"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Specification"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceSpecification"
    patch:
      tags:
      - "serviceSpecification"
      summary: "Updates partially a 'ServiceSpecification' by Id"
      operationId: "patchServiceSpecification"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Service Specification"
        required: true
        type: "string"
      - in: "body"
        name: "serviceSpecification"
        description: "The Service Specification to be updated"
        required: true
        schema:
          $ref: "#/definitions/ServiceSpecification_Update"
      responses:
        201:
          description: "Updated"
          schema:
            $ref: "#/definitions/ServiceSpecification"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ServiceSpecification"
  /importJob:
    get:
      tags:
      - "importJob"
      summary: "List or find 'ImportJob' objects"
      operationId: "listImportJob"
      parameters:
      - name: "fields"
        in: "query"
        description: "Comma separated properties to display in response"
        required: false
        type: "string"
      - name: "contentType"
        in: "query"
        description: "For filtering: Indicates the format of the imported data"
        required: false
        type: "string"
      - name: "path"
        in: "query"
        description: "For filtering: URL of the root resource where the content of\
          \ the file specified by the import job must be applied"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        description: "For filtering: Status of the import job (not started, running,\
          \ succeeded, failed)"
        required: false
        type: "string"
      - name: "url"
        in: "query"
        description: "For filtering: URL of the file containing the data to be imported"
        required: false
        type: "string"
      - name: "completionDate"
        in: "query"
        description: "For filtering: Date at which the job was completed"
        required: false
        type: "string"
        format: "date-time"
      - name: "creationDate"
        in: "query"
        description: "For filtering: Date at which the job was created"
        required: false
        type: "string"
        format: "date-time"
      - name: "errorLog"
        in: "query"
        description: "For filtering: Reason for failure if status is failed"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImportJob"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ImportJob"
    post:
      tags:
      - "importJob"
      summary: "Creates a 'ImportJob'"
      operationId: "createImportJob"
      parameters:
      - in: "body"
        name: "importJob"
        description: "The Import Job to be created"
        required: true
        schema:
          $ref: "#/definitions/ImportJob_Create"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/ImportJob"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ImportJob"
  /importJob/{id}:
    get:
      tags:
      - "importJob"
      summary: "Retrieves a 'ImportJob' by Id"
      operationId: "retrieveImportJob"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Import Job"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImportJob"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ImportJob"
    delete:
      tags:
      - "importJob"
      summary: "Deletes a 'ImportJob' by Id"
      operationId: "deleteImportJob"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Import Job"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ImportJob"
  /exportJob:
    get:
      tags:
      - "exportJob"
      summary: "List or find 'ExportJob' objects"
      operationId: "listExportJob"
      parameters:
      - name: "fields"
        in: "query"
        description: "Comma separated properties to display in response"
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "For filtering: Used to scope the exported data"
        required: false
        type: "string"
      - name: "path"
        in: "query"
        description: "For filtering: URL of the root resource acting as the source\
          \ for streaming content to the file specified by the export job"
        required: false
        type: "string"
      - name: "contentType"
        in: "query"
        description: "For filtering: The format of the exported data"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        description: "For filtering: Status of the export job (not started, running,\
          \ succeeded, failed)"
        required: false
        type: "string"
      - name: "url"
        in: "query"
        description: "For filtering: URL of the file containing the data to be exported"
        required: false
        type: "string"
      - name: "completionDate"
        in: "query"
        description: "For filtering: Data at which the job was completed"
        required: false
        type: "string"
        format: "date-time"
      - name: "creationDate"
        in: "query"
        description: "For filtering: Date at which the job was created"
        required: false
        type: "string"
        format: "date-time"
      - name: "errorLog"
        in: "query"
        description: "For filtering: Reason for failure"
        required: false
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExportJob"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ExportJob"
    post:
      tags:
      - "exportJob"
      summary: "Creates a 'ExportJob'"
      operationId: "createExportJob"
      parameters:
      - in: "body"
        name: "exportJob"
        description: "The Export Job to be created"
        required: true
        schema:
          $ref: "#/definitions/ExportJob_Create"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/ExportJob"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ExportJob"
  /exportJob/{id}:
    get:
      tags:
      - "exportJob"
      summary: "Retrieves a 'ExportJob' by Id"
      operationId: "retrieveExportJob"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Export Job"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExportJob"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ExportJob"
    delete:
      tags:
      - "exportJob"
      summary: "Deletes a 'ExportJob' by Id"
      operationId: "deleteExportJob"
      parameters:
      - name: "id"
        in: "path"
        description: "Identifier of the Export Job"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "ExportJob"
  /hub:
    post:
      tags:
      - "events subscription"
      summary: "Register a listener"
      description: "Sets the communication endpoint address the service instance must\
        \ use to deliver information about its health state, execution state, failures\
        \ and metrics."
      operationId: "registerListener"
      parameters:
      - in: "body"
        name: "data"
        description: "Data containing the callback endpoint to deliver the information"
        required: true
        schema:
          $ref: "#/definitions/EventSubscriptionInput"
      responses:
        201:
          description: "Subscribed"
          schema:
            $ref: "#/definitions/EventSubscription"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EventsSubscription"
  /hub/{id}:
    delete:
      tags:
      - "events subscription"
      summary: "Unregister a listener"
      description: "Resets the communication endpoint address the service instance\
        \ must use to deliver information about its health state, execution state,\
        \ failures and metrics."
      operationId: "unregisterListener"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the registered listener"
        required: true
        type: "string"
      responses:
        201:
          description: "Unsubscribed"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "EventsSubscription"
definitions:
  ServiceCatalog:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier of the Catalog"
      href:
        type: "string"
        description: "Unique reference of the catalog"
      name:
        type: "string"
        description: "Name of the catalog"
      description:
        type: "string"
        description: "Description of this catalog"
      '@type':
        type: "string"
        description: "Indicates the (class) type of catalog. For service catalogs,\
          \ this will be 'ServiceCatalog'."
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "Indicates<b> </b>the base (class) type of this REST resource"
      version:
        type: "string"
        description: "Catalog version"
      validFor:
        description: "The period for which the catalog is valid"
        $ref: "#/definitions/TimePeriod"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status"
    description: "The root entity for service catalog management.\nA service catalog\
      \ is a group of service specifications made available through service candidates\
      \ that an organization provides to the consumers (internal consumers like its\
      \ employees or B2B customers or B2C customers). \nA service catalog typically\
      \ includes name, description and time period that is valid for. It will have\
      \ a list of ServiceCandidate catalog items. A ServiceCandidate is an entity\
      \ that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate\
      \ and its associated ServiceSpecification may be \"published\" - made visible\
      \ -in any number of ServiceCatalogs, or in none."
    example:
      '@baseType': "@baseType"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      id: "id"
      href: "href"
      '@schemaLocation': "@schemaLocation"
      version: "version"
  ServiceCatalog_Create:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the catalog"
      description:
        type: "string"
        description: "Description of this catalog"
      '@type':
        type: "string"
        description: "Indicates the (class) type of catalog. For service catalogs,\
          \ this will be 'ServiceCatalog'."
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "Indicates<b> </b>the base (class) type of this REST resource"
      version:
        type: "string"
        description: "Catalog version"
      validFor:
        description: "The period for which the catalog is valid"
        $ref: "#/definitions/TimePeriod"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status"
    description: "The root entity for service catalog management.\nA service catalog\
      \ is a group of service specifications made available through service candidates\
      \ that an organization provides to the consumers (internal consumers like its\
      \ employees or B2B customers or B2C customers). \nA service catalog typically\
      \ includes name, description and time period that is valid for. It will have\
      \ a list of ServiceCandidate catalog items. A ServiceCandidate is an entity\
      \ that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate\
      \ and its associated ServiceSpecification may be \"published\" - made visible\
      \ -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href"
    example:
      '@baseType': "@baseType"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      '@schemaLocation': "@schemaLocation"
      version: "version"
  ServiceCatalog_Update:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the catalog"
      description:
        type: "string"
        description: "Description of this catalog"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "Indicates<b> </b>the base (class) type of this REST resource"
      version:
        type: "string"
        description: "Catalog version"
      validFor:
        description: "The period for which the catalog is valid"
        $ref: "#/definitions/TimePeriod"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status"
    description: "The root entity for service catalog management.\nA service catalog\
      \ is a group of service specifications made available through service candidates\
      \ that an organization provides to the consumers (internal consumers like its\
      \ employees or B2B customers or B2C customers). \nA service catalog typically\
      \ includes name, description and time period that is valid for. It will have\
      \ a list of ServiceCandidate catalog items. A ServiceCandidate is an entity\
      \ that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate\
      \ and its associated ServiceSpecification may be \"published\" - made visible\
      \ -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href,id,href,@type,lastUpdate"
    example:
      '@baseType': "@baseType"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      '@schemaLocation': "@schemaLocation"
      version: "version"
  ServiceCategory:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier of the category"
      href:
        type: "string"
        description: "Hyperlink reference to the category"
      name:
        type: "string"
        description: "Name of the category"
      description:
        type: "string"
        description: "Description of the category"
      '@type':
        type: "string"
        description: "The (class) type of this category"
      '@schemalLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "Immediate base class type of this category"
      version:
        type: "string"
        description: "Category version"
      validFor:
        description: "The period for which the category is valid"
        $ref: "#/definitions/TimePeriod"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update"
      parentId:
        type: "string"
        description: "Unique identifier of the parent category"
      isRoot:
        type: "boolean"
        description: "If true, this Boolean indicates that the category is a root\
          \ of categories"
      relatedParty:
        type: "array"
        items:
          $ref: "#/definitions/RelatedPartyRef"
      serviceCandidate:
        type: "array"
        items:
          $ref: "#/definitions/ServiceCandidateRef"
      category:
        type: "array"
        items:
          $ref: "#/definitions/CategoryRef"
    description: "The (service) category resource is used to group service candidates\
      \ in logical containers. Categories can contain other categories."
    example:
      lifecycleStatus: "lifecycleStatus"
      isRoot: true
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      serviceCandidate:
      - '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      - '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      '@type': "@type"
      description: "description"
      relatedParty:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      version: "version"
      parentId: "parentId"
      '@baseType': "@baseType"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      '@schemalLocation': "@schemalLocation"
      id: "id"
      href: "href"
      category:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
  ServiceCategory_Create:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the category"
      description:
        type: "string"
        description: "Description of the category"
      '@type':
        type: "string"
        description: "The (class) type of this category"
      '@schemalLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "Immediate base class type of this category"
      version:
        type: "string"
        description: "Category version"
      validFor:
        description: "The period for which the category is valid"
        $ref: "#/definitions/TimePeriod"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update"
      parentId:
        type: "string"
        description: "Unique identifier of the parent category"
      isRoot:
        type: "boolean"
        description: "If true, this Boolean indicates that the category is a root\
          \ of categories"
      relatedParty:
        type: "array"
        items:
          $ref: "#/definitions/RelatedPartyRef"
      serviceCandidate:
        type: "array"
        items:
          $ref: "#/definitions/ServiceCandidateRef"
      category:
        type: "array"
        items:
          $ref: "#/definitions/CategoryRef"
    description: "The (service) category resource is used to group service candidates\
      \ in logical containers. Categories can contain other categories.\nSkipped properties:\
      \ id,href"
    example:
      lifecycleStatus: "lifecycleStatus"
      isRoot: true
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      serviceCandidate:
      - '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      - '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      '@type': "@type"
      description: "description"
      relatedParty:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      version: "version"
      parentId: "parentId"
      '@baseType': "@baseType"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      '@schemalLocation': "@schemalLocation"
      category:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
  ServiceCategory_Update:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the category"
      description:
        type: "string"
        description: "Description of the category"
      '@schemalLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "Immediate base class type of this category"
      version:
        type: "string"
        description: "Category version"
      validFor:
        description: "The period for which the category is valid"
        $ref: "#/definitions/TimePeriod"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status"
      parentId:
        type: "string"
        description: "Unique identifier of the parent category"
      isRoot:
        type: "boolean"
        description: "If true, this Boolean indicates that the category is a root\
          \ of categories"
      relatedParty:
        type: "array"
        items:
          $ref: "#/definitions/RelatedPartyRef"
      serviceCandidate:
        type: "array"
        items:
          $ref: "#/definitions/ServiceCandidateRef"
      category:
        type: "array"
        items:
          $ref: "#/definitions/CategoryRef"
    description: "The (service) category resource is used to group service candidates\
      \ in logical containers. Categories can contain other categories.\nSkipped properties:\
      \ id,href,id,href,@type,lastUpdate"
    example:
      '@baseType': "@baseType"
      lifecycleStatus: "lifecycleStatus"
      isRoot: true
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      serviceCandidate:
      - '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      - '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      name: "name"
      description: "description"
      '@schemalLocation': "@schemalLocation"
      relatedParty:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      category:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      version: "version"
      parentId: "parentId"
  ServiceCandidate:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier of this REST resource"
      href:
        type: "string"
        description: "Hyperlink reference to this REST resource"
      name:
        type: "string"
        description: "Name given to this REST resource"
      description:
        type: "string"
        description: "Description of this REST resource"
      '@type':
        type: "string"
        description: "Class type of this REST resource"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "The (immediate) base class type of this REST resource"
      version:
        type: "string"
        description: "the version of service candidate"
      validFor:
        description: "The period for which this REST resource is valid"
        $ref: "#/definitions/TimePeriod"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update of this REST resource"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status of the service\
          \ candidate."
      category:
        type: "array"
        items:
          $ref: "#/definitions/CategoryRef"
      serviceSpecification:
        $ref: "#/definitions/ServiceSpecificationRef"
    description: "ServiceCandidate is an entity that makes a service specification\
      \ available to a catalog. A\nServiceCandidate and its associated service specification\
      \ may be published - made visible - in any number of service catalogs, or in\
      \ none. One service specification can be composed of other service specifications."
    example:
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      serviceSpecification:
        '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      description: "description"
      version: "version"
      '@baseType': "@baseType"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
      href: "href"
      '@schemaLocation': "@schemaLocation"
      category:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
  ServiceCandidate_Create:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name given to this REST resource"
      description:
        type: "string"
        description: "Description of this REST resource"
      '@type':
        type: "string"
        description: "Class type of this REST resource"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "The (immediate) base class type of this REST resource"
      version:
        type: "string"
        description: "the version of service candidate"
      validFor:
        description: "The period for which this REST resource is valid"
        $ref: "#/definitions/TimePeriod"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update of this REST resource"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status of the service\
          \ candidate."
      category:
        type: "array"
        items:
          $ref: "#/definitions/CategoryRef"
      serviceSpecification:
        $ref: "#/definitions/ServiceSpecificationRef"
    description: "ServiceCandidate is an entity that makes a service specification\
      \ available to a catalog. A\nServiceCandidate and its associated service specification\
      \ may be published - made visible - in any number of service catalogs, or in\
      \ none. One service specification can be composed of other service specifications.\n\
      Skipped properties: id,href"
    example:
      '@baseType': "@baseType"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      serviceSpecification:
        '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      description: "description"
      '@schemaLocation': "@schemaLocation"
      category:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      version: "version"
  ServiceCandidate_Update:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name given to this REST resource"
      description:
        type: "string"
        description: "Description of this REST resource"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "The (immediate) base class type of this REST resource"
      version:
        type: "string"
        description: "the version of service candidate"
      validFor:
        description: "The period for which this REST resource is valid"
        $ref: "#/definitions/TimePeriod"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status of the service\
          \ candidate."
      category:
        type: "array"
        items:
          $ref: "#/definitions/CategoryRef"
      serviceSpecification:
        $ref: "#/definitions/ServiceSpecificationRef"
    description: "ServiceCandidate is an entity that makes a service specification\
      \ available to a catalog. A\nServiceCandidate and its associated service specification\
      \ may be published - made visible - in any number of service catalogs, or in\
      \ none. One service specification can be composed of other service specifications.\n\
      Skipped properties: id,href,id,href,@type,lastUpdate"
    example:
      '@baseType': "@baseType"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      serviceSpecification:
        '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        version: "version"
      description: "description"
      '@schemaLocation': "@schemaLocation"
      category:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      version: "version"
  ServiceSpecification:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier of this REST resource"
      href:
        type: "string"
        description: "Hyperlink reference to this REST resource"
      name:
        type: "string"
        description: "Name given to this REST resource"
      description:
        type: "string"
        description: "Description of this REST resource"
      '@type':
        type: "string"
        description: "Class type of this REST resource"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "The (immediate) base class type of this REST resource"
      version:
        type: "string"
        description: "Service specification version"
      validFor:
        description: "The period for which this REST resource is valid"
        $ref: "#/definitions/TimePeriod"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update of this REST resource"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status of the service\
          \ specification"
      isBundle:
        type: "boolean"
        description: "A flag indicates that if this service specification is a bundled\
          \ specification (true) or single (false)."
      resourceSpecification:
        type: "array"
        items:
          $ref: "#/definitions/ResourceSpecificationRef"
      attachment:
        type: "array"
        items:
          $ref: "#/definitions/Attachment"
      serviceSpecCharacteristic:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecCharacteristic"
      relatedParty:
        type: "array"
        items:
          $ref: "#/definitions/RelatedPartyRef"
      serviceSpecRelationship:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecRelationship"
      targetServiceSchema:
        $ref: "#/definitions/TargetServiceSchemaRef"
    description: "ServiceSpecification is a class that offers characteristics to describe\
      \ a type of service.\nFunctionally, it acts as a template by which Services\
      \ may be instantiated. By sharing the same  specification, these services would\
      \ therefore share the same set of characteristics."
    example:
      isBundle: true
      targetServiceSchema:
        '@type': "@type"
        '@schemaLocation': "@schemaLocation"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      resourceSpecification:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      description: "description"
      relatedParty:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      version: "version"
      '@baseType': "@baseType"
      attachment:
      - description: "description"
        href: "href"
        id: "id"
        type: "type"
        url: "url"
      - description: "description"
        href: "href"
        id: "id"
        type: "type"
        url: "url"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
      href: "href"
      '@schemaLocation': "@schemaLocation"
      serviceSpecCharacteristic:
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        '@valueSchemaLocation': "@valueSchemaLocation"
        isUnique: true
        description: "description"
        serviceSpecCharacteristicValue:
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        maxCardinality: 6
        minCardinality: 0
        serviceSpecCharRelationship:
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        regex: "regex"
        valueType: "valueType"
        name: "name"
        '@schemaLocation': "@schemaLocation"
        extensible: true
        configurable: true
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        '@valueSchemaLocation': "@valueSchemaLocation"
        isUnique: true
        description: "description"
        serviceSpecCharacteristicValue:
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        maxCardinality: 6
        minCardinality: 0
        serviceSpecCharRelationship:
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        regex: "regex"
        valueType: "valueType"
        name: "name"
        '@schemaLocation': "@schemaLocation"
        extensible: true
        configurable: true
      serviceSpecRelationship:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
  ServiceSpecification_Create:
    type: "object"
    required:
    - "@type"
    - "name"
    properties:
      name:
        type: "string"
        description: "Name given to this REST resource"
      description:
        type: "string"
        description: "Description of this REST resource"
      '@type':
        type: "string"
        description: "Class type of this REST resource"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "The (immediate) base class type of this REST resource"
      version:
        type: "string"
        description: "Service specification version"
      validFor:
        description: "The period for which this REST resource is valid"
        $ref: "#/definitions/TimePeriod"
      lastUpdate:
        type: "string"
        format: "date-time"
        description: "Date and time of the last update of this REST resource"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status of the service\
          \ specification"
      isBundle:
        type: "boolean"
        description: "A flag indicates that if this service specification is a bundled\
          \ specification (true) or single (false)."
      resourceSpecification:
        type: "array"
        items:
          $ref: "#/definitions/ResourceSpecificationRef"
      attachment:
        type: "array"
        items:
          $ref: "#/definitions/Attachment"
      serviceSpecCharacteristic:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecCharacteristic"
      relatedParty:
        type: "array"
        items:
          $ref: "#/definitions/RelatedPartyRef"
      serviceSpecRelationship:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecRelationship"
      targetServiceSchema:
        $ref: "#/definitions/TargetServiceSchemaRef"
    description: "ServiceSpecification is a class that offers characteristics to describe\
      \ a type of service.\nFunctionally, it acts as a template by which Services\
      \ may be instantiated. By sharing the same  specification, these services would\
      \ therefore share the same set of characteristics.\nSkipped properties: id,href"
    example:
      isBundle: true
      targetServiceSchema:
        '@type': "@type"
        '@schemaLocation': "@schemaLocation"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      resourceSpecification:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      description: "description"
      relatedParty:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      version: "version"
      '@baseType': "@baseType"
      attachment:
      - description: "description"
        href: "href"
        id: "id"
        type: "type"
        url: "url"
      - description: "description"
        href: "href"
        id: "id"
        type: "type"
        url: "url"
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      '@schemaLocation': "@schemaLocation"
      serviceSpecCharacteristic:
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        '@valueSchemaLocation': "@valueSchemaLocation"
        isUnique: true
        description: "description"
        serviceSpecCharacteristicValue:
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        maxCardinality: 6
        minCardinality: 0
        serviceSpecCharRelationship:
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        regex: "regex"
        valueType: "valueType"
        name: "name"
        '@schemaLocation': "@schemaLocation"
        extensible: true
        configurable: true
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        '@valueSchemaLocation': "@valueSchemaLocation"
        isUnique: true
        description: "description"
        serviceSpecCharacteristicValue:
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        maxCardinality: 6
        minCardinality: 0
        serviceSpecCharRelationship:
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        regex: "regex"
        valueType: "valueType"
        name: "name"
        '@schemaLocation': "@schemaLocation"
        extensible: true
        configurable: true
      serviceSpecRelationship:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
  ServiceSpecification_Update:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name given to this REST resource"
      description:
        type: "string"
        description: "Description of this REST resource"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing this REST\
          \ resource"
      '@baseType':
        type: "string"
        description: "The (immediate) base class type of this REST resource"
      version:
        type: "string"
        description: "Service specification version"
      validFor:
        description: "The period for which this REST resource is valid"
        $ref: "#/definitions/TimePeriod"
      lifecycleStatus:
        type: "string"
        description: "Used to indicate the current lifecycle status of the service\
          \ specification"
      isBundle:
        type: "boolean"
        description: "A flag indicates that if this service specification is a bundled\
          \ specification (true) or single (false)."
      resourceSpecification:
        type: "array"
        items:
          $ref: "#/definitions/ResourceSpecificationRef"
      attachment:
        type: "array"
        items:
          $ref: "#/definitions/Attachment"
      serviceSpecCharacteristic:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecCharacteristic"
      relatedParty:
        type: "array"
        items:
          $ref: "#/definitions/RelatedPartyRef"
      serviceSpecRelationship:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecRelationship"
      targetServiceSchema:
        $ref: "#/definitions/TargetServiceSchemaRef"
    description: "ServiceSpecification is a class that offers characteristics to describe\
      \ a type of service.\nFunctionally, it acts as a template by which Services\
      \ may be instantiated. By sharing the same  specification, these services would\
      \ therefore share the same set of characteristics.\nSkipped properties: id,href,id,href,lastUpdate,@type"
    example:
      isBundle: true
      targetServiceSchema:
        '@type': "@type"
        '@schemaLocation': "@schemaLocation"
      lifecycleStatus: "lifecycleStatus"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      resourceSpecification:
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      - name: "name"
        id: "id"
        href: "href"
        version: "version"
      description: "description"
      relatedParty:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
      version: "version"
      '@baseType': "@baseType"
      attachment:
      - description: "description"
        href: "href"
        id: "id"
        type: "type"
        url: "url"
      - description: "description"
        href: "href"
        id: "id"
        type: "type"
        url: "url"
      name: "name"
      '@schemaLocation': "@schemaLocation"
      serviceSpecCharacteristic:
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        '@valueSchemaLocation': "@valueSchemaLocation"
        isUnique: true
        description: "description"
        serviceSpecCharacteristicValue:
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        maxCardinality: 6
        minCardinality: 0
        serviceSpecCharRelationship:
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        regex: "regex"
        valueType: "valueType"
        name: "name"
        '@schemaLocation': "@schemaLocation"
        extensible: true
        configurable: true
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        '@valueSchemaLocation': "@valueSchemaLocation"
        isUnique: true
        description: "description"
        serviceSpecCharacteristicValue:
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        - rangeInterval: "rangeInterval"
          isDefault: true
          valueTo: 5
          regex: "regex"
          unitOfMeasure: "unitOfMeasure"
          validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          valueType: "valueType"
          '@schemaLocation': "@schemaLocation"
          value: "{}"
          valueFrom: 1
        maxCardinality: 6
        minCardinality: 0
        serviceSpecCharRelationship:
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        - validFor:
            startDateTime: "2000-01-23T04:56:07.000+00:00"
            endDateTime: "2000-01-23T04:56:07.000+00:00"
          '@type': "@type"
          name: "name"
          id: "id"
          href: "href"
          type: "type"
        regex: "regex"
        valueType: "valueType"
        name: "name"
        '@schemaLocation': "@schemaLocation"
        extensible: true
        configurable: true
      serviceSpecRelationship:
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
      - role: "role"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
  ImportJob:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Identifier of the import job"
      href:
        type: "string"
        description: "Reference of the import job"
      contentType:
        type: "string"
        description: "Indicates the format of the imported data"
      path:
        type: "string"
        description: "URL of the root resource where the content of the file specified\
          \ by the import job must be applied"
      status:
        type: "string"
        description: "Status of the import job (not started, running, succeeded, failed)"
      url:
        type: "string"
        description: "URL of the file containing the data to be imported"
      completionDate:
        type: "string"
        format: "date-time"
        description: "Date at which the job was completed"
      creationDate:
        type: "string"
        format: "date-time"
        description: "Date at which the job was created"
      errorLog:
        type: "string"
        description: "Reason for failure if status is failed"
    description: "Represents a task used to import resources from a file"
    example:
      path: "path"
      completionDate: "2000-01-23T04:56:07.000+00:00"
      errorLog: "errorLog"
      id: "id"
      href: "href"
      creationDate: "2000-01-23T04:56:07.000+00:00"
      contentType: "contentType"
      url: "url"
      status: "status"
  ImportJob_Create:
    type: "object"
    required:
    - "url"
    properties:
      contentType:
        type: "string"
        description: "Indicates the format of the imported data"
      path:
        type: "string"
        description: "URL of the root resource where the content of the file specified\
          \ by the import job must be applied"
      status:
        type: "string"
        description: "Status of the import job (not started, running, succeeded, failed)"
      url:
        type: "string"
        description: "URL of the file containing the data to be imported"
      completionDate:
        type: "string"
        format: "date-time"
        description: "Date at which the job was completed"
      creationDate:
        type: "string"
        format: "date-time"
        description: "Date at which the job was created"
      errorLog:
        type: "string"
        description: "Reason for failure if status is failed"
    description: "Represents a task used to import resources from a file\nSkipped\
      \ properties: id,href"
    example:
      path: "path"
      completionDate: "2000-01-23T04:56:07.000+00:00"
      errorLog: "errorLog"
      creationDate: "2000-01-23T04:56:07.000+00:00"
      contentType: "contentType"
      url: "url"
      status: "status"
  ExportJob:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Identifier of the export job"
      href:
        type: "string"
        description: "Reference of the export job"
      query:
        type: "string"
        description: "Used to scope the exported data"
      path:
        type: "string"
        description: "URL of the root resource acting as the source for streaming\
          \ content to the file specified by the export job"
      contentType:
        type: "string"
        description: "The format of the exported data"
      status:
        type: "string"
        description: "Status of the export job (not started, running, succeeded, failed)"
      url:
        type: "string"
        description: "URL of the file containing the data to be exported"
      completionDate:
        type: "string"
        format: "date-time"
        description: "Data at which the job was completed"
      creationDate:
        type: "string"
        format: "date-time"
        description: "Date at which the job was created"
      errorLog:
        type: "string"
        description: "Reason for failure"
    description: "Represents a task used to export resources to a file"
    example:
      path: "path"
      query: "query"
      completionDate: "2000-01-23T04:56:07.000+00:00"
      errorLog: "errorLog"
      id: "id"
      href: "href"
      creationDate: "2000-01-23T04:56:07.000+00:00"
      contentType: "contentType"
      url: "url"
      status: "status"
  ExportJob_Create:
    type: "object"
    required:
    - "url"
    properties:
      query:
        type: "string"
        description: "Used to scope the exported data"
      path:
        type: "string"
        description: "URL of the root resource acting as the source for streaming\
          \ content to the file specified by the export job"
      contentType:
        type: "string"
        description: "The format of the exported data"
      status:
        type: "string"
        description: "Status of the export job (not started, running, succeeded, failed)"
      url:
        type: "string"
        description: "URL of the file containing the data to be exported"
      completionDate:
        type: "string"
        format: "date-time"
        description: "Data at which the job was completed"
      creationDate:
        type: "string"
        format: "date-time"
        description: "Date at which the job was created"
      errorLog:
        type: "string"
        description: "Reason for failure"
    description: "Represents a task used to export resources to a file\nSkipped properties:\
      \ id,href"
    example:
      path: "path"
      query: "query"
      completionDate: "2000-01-23T04:56:07.000+00:00"
      errorLog: "errorLog"
      creationDate: "2000-01-23T04:56:07.000+00:00"
      contentType: "contentType"
      url: "url"
      status: "status"
  TimePeriod:
    type: "object"
    properties:
      startDateTime:
        type: "string"
        format: "date-time"
        description: "An instant of time, starting at the TimePeriod"
      endDateTime:
        type: "string"
        format: "date-time"
        description: "An instant of time, ending at the TimePeriod."
    description: "A base / value business entity used to represent a period of time\
      \ between two timepoints."
    example:
      startDateTime: "2000-01-23T04:56:07.000+00:00"
      endDateTime: "2000-01-23T04:56:07.000+00:00"
  RelatedPartyRef:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier of a related party"
      href:
        type: "string"
        description: "Reference of the related party, could be a party reference or\
          \ a party role reference"
      role:
        type: "string"
        description: "Role of the related party."
      name:
        type: "string"
        description: "Name of the related party"
      validFor:
        description: "Validity period of the related party"
        $ref: "#/definitions/TimePeriod"
    description: "RelatedParty reference. A related party defines party or party role\
      \ linked to a specific entity."
    example:
      role: "role"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
      href: "href"
  ServiceCandidateRef:
    type: "object"
    properties:
      id:
        type: "string"
        description: "reference id to the target ServiceCandidate"
      href:
        type: "string"
        description: "Hyperlink reference to the target ServiceCandidate"
      version:
        type: "string"
        description: "ServiceCandidate version"
      name:
        type: "string"
        description: "Name given to the ServiceCandidate"
      '@type':
        type: "string"
        description: "The (class) type of the ServiceCandidate"
    description: "reference to ServiceCandidate object"
    example:
      '@type': "@type"
      name: "name"
      id: "id"
      href: "href"
      version: "version"
  CategoryRef:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique reference of the category"
      href:
        type: "string"
        description: "Unique reference of the category"
      version:
        type: "string"
        description: "Category version"
      name:
        type: "string"
        description: "Name of the category"
    description: "Category reference. The category resource is used to group product\
      \ offerings, service and resource candidates in logical containers. Categories\
      \ can contain other categories and/or product offerings, resource or service\
      \ candidates."
    example:
      name: "name"
      id: "id"
      href: "href"
      version: "version"
  ServiceSpecificationRef:
    type: "object"
    properties:
      id:
        type: "string"
        description: "reference id to the target ServiceSpecification"
      href:
        type: "string"
        description: "Hyperlink reference to the target ServiceSpecification"
      version:
        type: "string"
        description: "ServiceSpecification version"
      name:
        type: "string"
        description: "Name given to the ServiceSpecification"
      '@type':
        type: "string"
        description: "The (class) type of the ServiceSpecification"
    description: "reference to  ServiceSpecification object"
    example:
      '@type': "@type"
      name: "name"
      id: "id"
      href: "href"
      version: "version"
  ResourceSpecificationRef:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier of the resource specification"
      href:
        type: "string"
        description: "Reference of the resource specification"
      name:
        type: "string"
        description: "Name of the requiredResourceSpecification"
      version:
        type: "string"
        description: "Resource specification version"
    description: "Resource Specification reference: The ResourceSpecification is required\
      \ to realize a ProductSpecification."
    example:
      name: "name"
      id: "id"
      href: "href"
      version: "version"
  Attachment:
    type: "object"
    properties:
      description:
        type: "string"
        description: "A narrative text describing the content of the attachment"
      href:
        type: "string"
        description: "Reference of the attachment"
      id:
        type: "string"
        description: "Unique identifier of the attachment"
      type:
        type: "string"
        description: "Attachment type such as video, picture"
      url:
        type: "string"
        description: "Uniform Resource Locator, is a web page address (a subset of\
          \ URI)"
    description: "Complements the description of an element (for instance a product)\
      \ through video, pictures..."
    example:
      description: "description"
      href: "href"
      id: "id"
      type: "type"
      url: "url"
  ServiceSpecCharacteristic:
    type: "object"
    properties:
      name:
        type: "string"
        description: "A word, term, or phrase by which this characteristic specification\
          \ is known and distinguished from other characteristic specifications."
      description:
        type: "string"
        description: "A narrative that explains in detail what the ServiceSpecCharacteristic\
          \ is"
      valueType:
        type: "string"
        description: "A kind of value that the characteristic can take on, such as\
          \ numeric, text and so forth"
      configurable:
        type: "boolean"
        description: "If true, the Boolean indicates that the ServiceSpecCharacteristic\
          \ is configurable"
      validFor:
        description: "The period for which the ServiceSpecCharacteristic is valid"
        $ref: "#/definitions/TimePeriod"
      '@type':
        type: "string"
        description: "(Class) type of the ServiceSpecCharacteristic"
      '@schemaLocation':
        type: "string"
        description: "A link to the schema describing this characteristic"
      '@valueSchemaLocation':
        type: "string"
        description: "This (optional) field provides a link to the schema describing\
          \ the value type."
      minCardinality:
        type: "integer"
        description: "The minimum number of instances a CharacteristicValue can take\
          \ on. For example, zero to five phone numbers in a group calling plan, where\
          \ zero is the value for the minCardinality."
      maxCardinality:
        type: "integer"
        description: "The maximum number of instances a CharacteristicValue can take\
          \ on. For example, zero to five phone numbers in a group calling plan, where\
          \ five is the value for the maxCardinality."
      isUnique:
        type: "boolean"
        description: "An indicator that specifies if a value is unique for the specification.\
          \ Possible values are; \"unique while value is in effect\" and \"unique\
          \ whether value is in effect or not\""
      regex:
        type: "string"
        description: "A rule or principle represented in regular expression used to\
          \ derive the value of a characteristic value."
      extensible:
        type: "boolean"
        description: "An indicator that specifies that the values for the characteristic\
          \ can be extended by adding new values when instantiating a characteristic\
          \ for an Entity."
      serviceSpecCharacteristicValue:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecCharacteristicValue"
      serviceSpecCharRelationship:
        type: "array"
        items:
          $ref: "#/definitions/ServiceSpecCharRelationship"
    description: "This class represents the key features of this service specification.\
      \ For example, bandwidth is a characteristic of many different types of services;\
      \ if bandwidth is a relevant characteristic (e.g., from the point-of-view of\
      \ a Customer obtaining this Service via a Product) then bandwidth would be a\
      \ ServiceSpecCharacteristic for that particular Service."
    example:
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      '@valueSchemaLocation': "@valueSchemaLocation"
      isUnique: true
      description: "description"
      serviceSpecCharacteristicValue:
      - rangeInterval: "rangeInterval"
        isDefault: true
        valueTo: 5
        regex: "regex"
        unitOfMeasure: "unitOfMeasure"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        valueType: "valueType"
        '@schemaLocation': "@schemaLocation"
        value: "{}"
        valueFrom: 1
      - rangeInterval: "rangeInterval"
        isDefault: true
        valueTo: 5
        regex: "regex"
        unitOfMeasure: "unitOfMeasure"
        validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        valueType: "valueType"
        '@schemaLocation': "@schemaLocation"
        value: "{}"
        valueFrom: 1
      maxCardinality: 6
      minCardinality: 0
      serviceSpecCharRelationship:
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
      - validFor:
          startDateTime: "2000-01-23T04:56:07.000+00:00"
          endDateTime: "2000-01-23T04:56:07.000+00:00"
        '@type': "@type"
        name: "name"
        id: "id"
        href: "href"
        type: "type"
      regex: "regex"
      valueType: "valueType"
      name: "name"
      '@schemaLocation': "@schemaLocation"
      extensible: true
      configurable: true
  ServiceSpecRelationship:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Type of relationship such as migration, substitution, dependency,\
          \ exclusivity"
      role:
        type: "string"
        description: "The association role for this service specification"
      id:
        type: "string"
        description: "Unique identifier of target ServiceSpecification"
      href:
        type: "string"
        description: "Reference of the target ServiceSpecification"
      name:
        type: "string"
        description: "The name given to the target service specification instance"
      validFor:
        description: "The period for which the ServiceSpecRelationship is valid"
        $ref: "#/definitions/TimePeriod"
    description: "A migration, substitution, dependency or exclusivity relationship\
      \ between/among service specifications."
    example:
      role: "role"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
      href: "href"
      type: "type"
  TargetServiceSchemaRef:
    type: "object"
    properties:
      '@type':
        type: "string"
        description: "Class type of the target service"
      '@schemaLocation':
        type: "string"
        description: "This field provides a link to the schema describing the target\
          \ service"
    description: "The reference object to the schema and type of target service which\
      \ is described by service specification"
    example:
      '@type': "@type"
      '@schemaLocation': "@schemaLocation"
  ServiceSpecCharacteristicValue:
    type: "object"
    properties:
      valueType:
        type: "string"
        description: "A kind of value that the characteristic value can take on, such\
          \ as numeric, text and so forth"
      isDefault:
        type: "boolean"
        description: "If true, the Boolean Indicates if the value is the default value\
          \ for a characteristic"
      value:
        type: "object"
        description: "the  value that the characteristic can take on."
        properties: {}
      unitOfMeasure:
        type: "string"
        description: "A length, surface, volume, dry measure, liquid measure, money,\
          \ weight, time, and the like. In general, a determinate quantity or magnitude\
          \ of the kind designated, taken as a standard of comparison for others of\
          \ the same kind, in assigning to them numerical values, as 1 foot, 1 yard,\
          \ 1 mile, 1 square foot."
      validFor:
        description: "The period of time for which a value is applicable."
        $ref: "#/definitions/TimePeriod"
      valueFrom:
        type: "integer"
        description: "The low range value that a characteristic can take on"
      valueTo:
        type: "integer"
        description: "The upper range value that a characteristic can take on"
      rangeInterval:
        type: "string"
        description: "An indicator that specifies the inclusion or exclusion of the\
          \ valueFrom and valueTo attributes. If applicable, possible values are \"\
          open\", \"closed\", \"closedBottom\" and \"closedTop\"."
      regex:
        type: "string"
        description: "A regular expression constraint for given value"
      '@type':
        type: "string"
        description: "The class type of the characteristic value"
      '@schemaLocation':
        type: "string"
        description: "Hyperlink reference to schema describing this object."
    description: "A ServiceSpecCharacteristicValue object is used to define a set\
      \ of attributes, each of which can be assigned to a corresponding set of attributes\
      \ in a ServiceSpecCharacteristic object. The values of the attributes in the\
      \ ServiceSpecCharacteristicValue object describe the values of the attributes\
      \ that a corresponding ServiceSpecCharacteristic object can take on."
    example:
      rangeInterval: "rangeInterval"
      isDefault: true
      valueTo: 5
      regex: "regex"
      unitOfMeasure: "unitOfMeasure"
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      valueType: "valueType"
      '@schemaLocation': "@schemaLocation"
      value: "{}"
      valueFrom: 1
  ServiceSpecCharRelationship:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Type of relationship such as aggregation, migration, substitution,\
          \ dependency, exclusivity"
      name:
        type: "string"
        description: "Name of the target  characteristic"
      id:
        type: "string"
        description: "Unique identifier of the target specification"
      href:
        type: "string"
        description: "Hyperlink reference to the target specification"
      '@type':
        type: "string"
        description: "class type of target specification"
      validFor:
        description: "The period for which the object is valid"
        $ref: "#/definitions/TimePeriod"
    description: "An aggregation, migration, substitution, dependency or exclusivity\
      \ relationship between/among Specification Characteristics."
    example:
      validFor:
        startDateTime: "2000-01-23T04:56:07.000+00:00"
        endDateTime: "2000-01-23T04:56:07.000+00:00"
      '@type': "@type"
      name: "name"
      id: "id"
      href: "href"
      type: "type"
  EventSubscription:
    required:
    - "callback"
    - "id"
    properties:
      id:
        type: "string"
        description: "Id of the listener"
      callback:
        type: "string"
        description: "The callback being registered."
      query:
        type: "string"
        description: "additional data to be passed"
    example:
      query: "query"
      callback: "callback"
      id: "id"
  EventSubscriptionInput:
    required:
    - "callback"
    properties:
      callback:
        type: "string"
        description: "The callback being registered."
      query:
        type: "string"
        description: "additional data to be passed"
    example:
      query: "query"
      callback: "callback"
  Error:
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        description: "An integer coding the error type. This is given to caller so\
          \ he can translate them if required."
      message:
        type: "string"
        description: "A short localized string that describes the error."
      description:
        type: "string"
        description: "(optional) A long localized error description if needed. It\
          \ can contain precise information about which parameter is missing, or what\
          \ are the identifier acceptable values."
      infoURL:
        type: "string"
        description: "(optional) A URL to online documentation that provides more\
          \ information about the error."
